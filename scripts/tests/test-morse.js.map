{"version":3,"file":"test-morse.js","sourceRoot":"","sources":["../../src/tests/test-morse.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,MAAM,CAAC;AAE9B,OAAO,EAAE,aAAa,EAAE,YAAY,EAAE,SAAS,EAAE,WAAW,EAAE,MAAM,aAAa,CAAC;AAElF,KAAK,CAAC,OAAO,EAAE,GAAG,EAAE;IAChB,IAAI,CAAC,mBAAmB,EAAE,GAAG,EAAE;QAC3B,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;IACxD,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,kBAAkB,EAAE,GAAG,EAAE;QAC1B,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;IACvD,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,YAAY,EAAE,GAAG,EAAE;QACpB,MAAM,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QAC3C,MAAM,MAAM,GAAG,IAAI,GAAG,CAAC,SAAS,CAAC,CAAC;QAClC,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC;IAChD,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,aAAa,EAAE,GAAG,EAAE;QACrB,MAAM,IAAI,GAAG;YACT,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE;YAC1B,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE;YAC9B,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,SAAS,EAAE;YACjC,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,WAAW,EAAE;YACrC,EAAE,IAAI,EAAE,qBAAqB,EAAE,KAAK,EAAE,gEAAgE,EAAE;YACxG,EAAE,IAAI,EAAE,eAAe,EAAE,KAAK,EAAE,2DAA2D,EAAE;SAChG,CAAC;QACF,KAAK,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,IAAI,EAAE;YAChC,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,EAAE,KAAK,CAAC,CAAC;SAC1C;IACL,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["import { assert } from \"chai\";\n\nimport { MORSE_LETTERS, MORSE_DIGITS, MORSE_ALL, textToMorse } from \"../morse.js\";\n\nsuite(\"Morse\", () => {\n    test(\"number of letters\", () => {\n        assert.equal(Object.keys(MORSE_LETTERS).length, 26);\n    });\n\n    test(\"number of digits\", () => {\n        assert.equal(Object.keys(MORSE_DIGITS).length, 10);\n    });\n\n    test(\"all unique\", () => {\n        const encodings = Object.values(MORSE_ALL);\n        const unique = new Set(encodings);\n        assert.equal(encodings.length, unique.size);\n    });\n\n    test(\"textToMorse\", () => {\n        const test = [\n            { text: \"A\", morse: \".-\" },\n            { text: \"AA\", morse: \".- .-\" },\n            { text: \"A A\", morse: \".- | .-\" },\n            { text: \"<SOS>\", morse: \"...---...\" },\n            { text: \"CQ CQ DE K7MCK <SK>\", morse: \"-.-. --.- | -.-. --.- | -.. . | -.- --... -- -.-. -.- | ...-.-\" },\n            { text: \"Hello, world!\", morse: \".... . .-.. .-.. --- --..-- | .-- --- .-. .-.. -.. -.-.--\" },\n        ];\n        for (const { text, morse } of test) {\n            assert.equal(textToMorse(text), morse);\n        }\n    });\n});\n\n"]}