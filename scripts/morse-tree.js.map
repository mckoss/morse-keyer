{"version":3,"file":"morse-tree.js","sourceRoot":"","sources":["../src/morse-tree.ts"],"names":[],"mappings":"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","sourcesContent":["import { MorseTable } from './morse';\n\nexport { makeMorseTree, rotate, findPosition };\n\nconst WIDTH = 4;\nconst HEIGHT = 4;\nconst SYM_RADIUS = 0.2;\n\nfunction makeMorseTree(symbols: MorseTable): string {\n    let result = `<svg class=\"morse-tree\" viewBox=\"${-WIDTH/2} ${-HEIGHT/2} ${WIDTH} ${HEIGHT}\">`;\n    result += `\\n<style>\n        circle.start {\n            fill: red;\n            stroke: none;\n        }\n\n        circle.symbol {\n            fill: white;\n            stroke: black;\n            stroke-width: 0.01;\n            r: ${SYM_RADIUS};\n        }\n\n        text {\n            font-size: 0.1px;\n        }\n    </style>\n    `;\n\n    for (const [letter, morse] of Object.entries(symbols)) {\n        const [x, y] = findPosition(morse);\n        result += `\\n<circle class=\"symbol\" cx=\"${x}\" cy=\"${y}\" />`;\n        result += `\\n<text x=\"${x}\" y=\"${y}\">${letter}</text>`;\n    }\n\n    result += `\\n</svg>`;\n\n    return result;\n}\n\ntype Coord = [number, number];\n\n// Poistion of letter in a 2d quadtree rooted at the origin.\n// By scanning the morse code string, each dot traverses the\n// left branch and each dash traverses the right branch.\nfunction findPosition(morse: string): Coord {\n    let result = [0, 0];\n    let dir: Coord = [0, -1];\n    let scale = WIDTH / 4;\n    let isSquare = true;\n    let pos: Coord = [0, 0];\n\n    for (let c of morse) {\n        let turn = c === '.' ? 1 : -1;\n        dir = rotate(dir, turn);\n        pos = add(pos, mult(dir, scale));\n        if (isSquare) {\n            isSquare = false;\n        } else {\n            scale /= 2;\n            isSquare = true;\n        }\n    }\n\n    return pos;\n}\n\n// Rotate a vector by 90 degrees counterclockwise for each turn.\n// Turns can be positive or negative.\n// Assume a left-handed coordinate system (y-axis points down).\nfunction rotate(dir: Coord, turns: number): Coord {\n    const COS = [1, 0, -1, 0];\n    const SIN = [0, 1, 0, -1];\n\n    turns = turns % 4;\n    if (turns < 0) {\n        turns += 4;\n    }\n\n    const x = dir[0] * COS[turns] + dir[1] * SIN[turns];\n    const y = -dir[0] * SIN[turns] + dir[1] * COS[turns];\n\n    return [x, y];\n}\n\nfunction add(a: Coord, b: Coord): Coord {\n    return [a[0] + b[0], a[1] + b[1]];\n}\n\nfunction mult(a: Coord, scalar: number): Coord {\n    return [a[0] * scalar, a[1] * scalar];\n}\n"]}