{"version":3,"file":"morse.js","sourceRoot":"","sources":["../src/morse.ts"],"names":[],"mappings":"AAAA,OAAO,EACS,aAAa,EAAE,YAAY,EAAE,iBAAiB,EAAE,cAAc,EAAE,SAAS,EACrF,SAAS,EAAE,UAAU,EAAE,aAAa,EAAE,WAAW,EACpD,CAAC;AAMF,oEAAoE;AACpE,8BAA8B;AAC9B,MAAM,SAAS,GAAG,QAAQ,CAAC;AAC3B,MAAM,UAAU,GAAG,SAAS,CAAC;AAE7B,SAAS,aAAa,CAAC,KAAa;IAChC,OAAO,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;AACrE,CAAC;AAED,kCAAkC;AAClC,MAAM,aAAa,GAAe;IAC9B,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,MAAM;IAC1D,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,MAAM;IAC5D,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,KAAK;IAC1D,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,MAAM;IAC1D,CAAC,EAAE,MAAM,EAAE,CAAC,EAAE,MAAM;CACvB,CAAC;AAEF,MAAM,YAAY,GAAe;IAC7B,CAAC,EAAE,OAAO,EAAE,CAAC,EAAE,OAAO,EAAE,CAAC,EAAE,OAAO,EAAE,CAAC,EAAE,OAAO,EAAE,CAAC,EAAE,OAAO;IAC1D,CAAC,EAAE,OAAO,EAAE,CAAC,EAAE,OAAO,EAAE,CAAC,EAAE,OAAO,EAAE,CAAC,EAAE,OAAO,EAAE,CAAC,EAAE,OAAO;CAC7D,CAAC;AAEF,MAAM,iBAAiB,GAAe;IAClC,GAAG,EAAE,QAAQ,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG,EAAE,QAAQ;IAC1D,GAAG,EAAE,QAAQ,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,EAAE,OAAO,EAAE,GAAG,EAAE,QAAQ;IACxD,GAAG,EAAE,OAAO,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG,EAAE,OAAO;IACxD,GAAG,EAAE,OAAO,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG,EAAE,QAAQ;IACzD,GAAG,EAAE,SAAS,EAAE,GAAG,EAAE,QAAQ;CAChC,CAAC;AAEF,gDAAgD;AAChD,MAAM,cAAc,GAAG;IACnB,IAAI,EAAE,gBAAgB;IACtB,IAAI,EAAE,MAAM;IACZ,IAAI,EAAE,OAAO;IACb,IAAI,EAAE,aAAa;IACnB,IAAI,EAAE,gBAAgB;IACtB,GAAG,EAAE,2BAA2B;IAChC,IAAI,EAAE,gDAAgD;IACtD,IAAI,EAAE,yBAAyB;CAClC,CAAC;AAEF,MAAM,SAAS,GAAG,EAAE,GAAG,aAAa,EAAE,GAAG,YAAY,EAAE,GAAG,iBAAiB,EAAE,CAAC;AAE9E,kGAAkG;AAClG,kGAAkG;AAClG,+FAA+F;AAC/F,2FAA2F;AAC3F,6BAA6B;AAC7B,EAAE;AACF,2CAA2C;AAC3C,oEAAoE;AACpE,iCAAiC;AACjC,mCAAmC;AACnC,mCAAmC;AACnC,SAAS,UAAU,CAAC,KAAa;IACjC,4GAA4G;IAC5G,wBAAwB;IACxB,oDAAoD;IACpD,oDAAoD;IACpD,WAAW;IACX,SAAS;IACT,wEAAwE;IACpE,OAAO,KAAK,CAAC;AACjB,CAAC;AAED,iFAAiF;AACjF,8FAA8F;AAC9F,6CAA6C;AAC7C,EAAE;AACF,wFAAwF;AACxF,qBAAqB;AACrB,SAAS,WAAW,CAAC,IAAY;IAC7B,IAAI,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;IACnB,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;IACnC,IAAI,MAAM,GAAG,EAAE,CAAC;IAChB,IAAI,OAAO,GAAG,GAAG,CAAC;IAClB,KAAK,IAAI,CAAC,IAAI,IAAI,EAAE;QAChB,CAAC,GAAG,CAAC,CAAC,WAAW,EAAE,CAAC;QACpB,QAAQ,CAAC,EAAE;YACP,KAAK,GAAG;gBACJ,MAAM,IAAI,IAAI,CAAC;gBACf,MAAM;YAEV,KAAK,GAAG;gBACJ,OAAO,GAAG,EAAE,CAAC;gBACb,MAAM;YAEV,KAAK,GAAG;gBACJ,OAAO,GAAG,GAAG,CAAC;gBACd,MAAM;YAEV;gBACI,IAAI,CAAC,IAAI,SAAS,EAAE;oBAChB,MAAM,IAAI,SAAS,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC;iBACpC;gBACD,MAAM;SACb;KACJ;IAED,OAAO,MAAM,CAAC,IAAI,EAAE,CAAC;AACzB,CAAC","sourcesContent":["export {\n    MorseTable, MORSE_LETTERS, MORSE_DIGITS, MORSE_PUNCTUATION, MORSE_PROSIGNS, MORSE_ALL,\n    MORSE_DOT, MORSE_DASH, htmlFromMorse, textToMorse\n};\n\ninterface MorseTable {\n    [character: string]: string;\n}\n\n// These are close but imperfect approximations of correctly aligned\n// and scaled dots and dashes.\nconst MORSE_DOT = \"&sdot;\";\nconst MORSE_DASH = \"&minus;\";\n\nfunction htmlFromMorse(morse: string): string {\n    return morse.replace(/\\./g, MORSE_DOT).replace(/-/g, MORSE_DASH);\n}\n\n// Table of all Morse code letters\nconst MORSE_LETTERS: MorseTable = {\n    A: '.-', B: '-...', C: '-.-.', D: '-..', E: '.', F: '..-.',\n    G: '--.', H: '....', I: '..', J: '.---', K: '-.-', L: '.-..',\n    M: '--', N: '-.', O: '---', P: '.--.', Q: '--.-', R: '.-.',\n    S: '...', T: '-', U: '..-', V: '...-', W: '.--', X: '-..-',\n    Y: '-.--', Z: '--..'\n};\n\nconst MORSE_DIGITS: MorseTable = {\n    0: '-----', 1: '.----', 2: '..---', 3: '...--', 4: '....-',\n    5: '.....', 6: '-....', 7: '--...', 8: '---..', 9: '----.'\n};\n\nconst MORSE_PUNCTUATION: MorseTable = {\n    '.': '.-.-.-', ',': '--..--', '?': '..--..', \"'\": '.----.',\n    '!': '-.-.--', '/': '-..-.', '(': '-.--.', ')': '-.--.-',\n    '&': '.-...', ':': '---...', ';': '-.-.-.', '=': '-...-',\n    '+': '.-.-.', '-': '-....-', '_': '..--.-', '\"': '.-..-.',\n    '$': '...-..-', '@': '.--.-.'\n};\n\n// Prosigns as used in Amateur Radio CW contacts\nconst MORSE_PROSIGNS = {\n    'AR': 'End of message',\n    'AS': 'Wait',\n    'BK': 'Break',\n    'BT': 'New section',\n    'SK': 'End of contact',\n    'K': 'End of tranmission (over)',\n    'KN': 'End of transmission - other station only reply',\n    'HH': 'Sending error - retying',\n};\n\nconst MORSE_ALL = { ...MORSE_LETTERS, ...MORSE_DIGITS, ...MORSE_PUNCTUATION };\n\n// Convert string with '.', '-', and ' ' to an svg element that renders the morse code as dots and\n// dashes. This uses morse.css for common styling of line width and color. This is based on an SVG\n// coordinate system wher the dots are 10 units wide.  We also add 15 units of space before and\n// after the symbols - so that abutting symbols would be correctly spaced at 30 units apart\n// (inter-character spacing).\n//\n// Dot width: 10 units (same as line width)\n// Dash width: 30 units (20 unit line with end-caps of 5 units each)\n// Inter-symbol spacing: 10 units\n// Inter-charcter spacing: 30 units\n// Prefix/postfix spacing: 15 units\nfunction morseToSvg(morse: string): string {\n//     <svg width=\"40px\" height=\"25px\" viewBox=\"0 0 80 50\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\n//     <g class=\"morse\">\n//         <line x1=\"20\" y1=\"25\" x2=\"20\" y2=\"25\"  />\n//         <line x1=\"40\" y1=\"25\" x2=\"60\" y2=\"25\"  />\n//     </g>\n// </svg>\n//     return morse.replace(/\\./g, MORSE_DOT).replace(/-/g, MORSE_DASH);\n    return morse;\n}\n\n// Convert string of characters to string or morse code dots, dashes, and spaces.\n// Inter-character spacing will output as a single space.  Inter-word spacing will output as a\n// verticle bar surrounded by spaces (' | ').\n//\n// Prosigns can be input as <SK>, for example and there will be no space insterst in the\n// sequence '...-.-'.\nfunction textToMorse(text: string): string {\n    text = text.trim();\n    text = text.replace(/\\s\\s+/g, ' ');\n    let result = '';\n    let spacing = ' ';\n    for (let c of text) {\n        c = c.toUpperCase();\n        switch (c) {\n            case ' ':\n                result += '| ';\n                break;\n\n            case '<':\n                spacing = '';\n                break;\n\n            case '>':\n                spacing = ' ';\n                break;\n\n            default:\n                if (c in MORSE_ALL) {\n                    result += MORSE_ALL[c] + spacing;\n                }\n                break;\n        }\n    }\n\n    return result.trim();\n}\n"]}